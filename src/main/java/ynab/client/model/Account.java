/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ynab.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Account
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-25T01:42:20.552-05:00")
public class Account {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHECKING("checking"),
    
    SAVINGS("savings"),
    
    CASH("cash"),
    
    CREDITCARD("creditCard"),
    
    LINEOFCREDIT("lineOfCredit"),
    
    OTHERASSET("otherAsset"),
    
    OTHERLIABILITY("otherLiability"),
    
    PAYPAL("payPal"),
    
    MERCHANTACCOUNT("merchantAccount"),
    
    INVESTMENTACCOUNT("investmentAccount"),
    
    MORTGAGE("mortgage");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("on_budget")
  private Boolean onBudget = null;

  @SerializedName("closed")
  private Boolean closed = null;

  @SerializedName("balance")
  private BigDecimal balance = null;

  @SerializedName("cleared_balance")
  private BigDecimal clearedBalance = null;

  @SerializedName("uncleared_balance")
  private BigDecimal unclearedBalance = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  public Account id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Account name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Account type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Account onBudget(Boolean onBudget) {
    this.onBudget = onBudget;
    return this;
  }

   /**
   * Whether this account is on budget or not
   * @return onBudget
  **/
  @ApiModelProperty(required = true, value = "Whether this account is on budget or not")
  public Boolean isOnBudget() {
    return onBudget;
  }

  public void setOnBudget(Boolean onBudget) {
    this.onBudget = onBudget;
  }

  public Account closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

   /**
   * Whether this account is closed or not
   * @return closed
  **/
  @ApiModelProperty(required = true, value = "Whether this account is closed or not")
  public Boolean isClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }

  public Account balance(BigDecimal balance) {
    this.balance = balance;
    return this;
  }

   /**
   * The current balance of the account in milliunits format
   * @return balance
  **/
  @ApiModelProperty(required = true, value = "The current balance of the account in milliunits format")
  public BigDecimal getBalance() {
    return balance;
  }

  public void setBalance(BigDecimal balance) {
    this.balance = balance;
  }

  public Account clearedBalance(BigDecimal clearedBalance) {
    this.clearedBalance = clearedBalance;
    return this;
  }

   /**
   * The current cleared balance of the account in milliunits format
   * @return clearedBalance
  **/
  @ApiModelProperty(required = true, value = "The current cleared balance of the account in milliunits format")
  public BigDecimal getClearedBalance() {
    return clearedBalance;
  }

  public void setClearedBalance(BigDecimal clearedBalance) {
    this.clearedBalance = clearedBalance;
  }

  public Account unclearedBalance(BigDecimal unclearedBalance) {
    this.unclearedBalance = unclearedBalance;
    return this;
  }

   /**
   * The current uncleared balance of the account in milliunits format
   * @return unclearedBalance
  **/
  @ApiModelProperty(required = true, value = "The current uncleared balance of the account in milliunits format")
  public BigDecimal getUnclearedBalance() {
    return unclearedBalance;
  }

  public void setUnclearedBalance(BigDecimal unclearedBalance) {
    this.unclearedBalance = unclearedBalance;
  }

  public Account deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
   * @return deleted
  **/
  @ApiModelProperty(required = true, value = "Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.id, account.id) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.onBudget, account.onBudget) &&
        Objects.equals(this.closed, account.closed) &&
        Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.clearedBalance, account.clearedBalance) &&
        Objects.equals(this.unclearedBalance, account.unclearedBalance) &&
        Objects.equals(this.deleted, account.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, onBudget, closed, balance, clearedBalance, unclearedBalance, deleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    onBudget: ").append(toIndentedString(onBudget)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    clearedBalance: ").append(toIndentedString(clearedBalance)).append("\n");
    sb.append("    unclearedBalance: ").append(toIndentedString(unclearedBalance)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

