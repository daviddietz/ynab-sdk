/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ynab.client.api;

import ynab.client.invoker.ApiCallback;
import ynab.client.invoker.ApiClient;
import ynab.client.invoker.ApiException;
import ynab.client.invoker.ApiResponse;
import ynab.client.invoker.Configuration;
import ynab.client.invoker.Pair;
import ynab.client.invoker.ProgressRequestBody;
import ynab.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ynab.client.model.ErrorResponse;
import ynab.client.model.PayeeLocationResponse;
import ynab.client.model.PayeeLocationsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayeeLocationsApi {
    private ApiClient apiClient;

    public PayeeLocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayeeLocationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getPayeeLocationById
     * @param budgetId The ID of the Budget. (required)
     * @param payeeLocationId ID of payee location (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayeeLocationByIdCall(String budgetId, String payeeLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/payee_locations/{payee_location_id}"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()))
            .replaceAll("\\{" + "payee_location_id" + "\\}", apiClient.escapeString(payeeLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayeeLocationByIdValidateBeforeCall(String budgetId, String payeeLocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getPayeeLocationById(Async)");
        }
        
        // verify the required parameter 'payeeLocationId' is set
        if (payeeLocationId == null) {
            throw new ApiException("Missing the required parameter 'payeeLocationId' when calling getPayeeLocationById(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayeeLocationByIdCall(budgetId, payeeLocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Single payee location
     * Returns a single payee location
     * @param budgetId The ID of the Budget. (required)
     * @param payeeLocationId ID of payee location (required)
     * @return PayeeLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayeeLocationResponse getPayeeLocationById(String budgetId, String payeeLocationId) throws ApiException {
        ApiResponse<PayeeLocationResponse> resp = getPayeeLocationByIdWithHttpInfo(budgetId, payeeLocationId);
        return resp.getData();
    }

    /**
     * Single payee location
     * Returns a single payee location
     * @param budgetId The ID of the Budget. (required)
     * @param payeeLocationId ID of payee location (required)
     * @return ApiResponse&lt;PayeeLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayeeLocationResponse> getPayeeLocationByIdWithHttpInfo(String budgetId, String payeeLocationId) throws ApiException {
        com.squareup.okhttp.Call call = getPayeeLocationByIdValidateBeforeCall(budgetId, payeeLocationId, null, null);
        Type localVarReturnType = new TypeToken<PayeeLocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Single payee location (asynchronously)
     * Returns a single payee location
     * @param budgetId The ID of the Budget. (required)
     * @param payeeLocationId ID of payee location (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayeeLocationByIdAsync(String budgetId, String payeeLocationId, final ApiCallback<PayeeLocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayeeLocationByIdValidateBeforeCall(budgetId, payeeLocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayeeLocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayeeLocations
     * @param budgetId The ID of the Budget. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayeeLocationsCall(String budgetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/payee_locations"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayeeLocationsValidateBeforeCall(String budgetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getPayeeLocations(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayeeLocationsCall(budgetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List payee locations
     * Returns all payee locations
     * @param budgetId The ID of the Budget. (required)
     * @return PayeeLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayeeLocationsResponse getPayeeLocations(String budgetId) throws ApiException {
        ApiResponse<PayeeLocationsResponse> resp = getPayeeLocationsWithHttpInfo(budgetId);
        return resp.getData();
    }

    /**
     * List payee locations
     * Returns all payee locations
     * @param budgetId The ID of the Budget. (required)
     * @return ApiResponse&lt;PayeeLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayeeLocationsResponse> getPayeeLocationsWithHttpInfo(String budgetId) throws ApiException {
        com.squareup.okhttp.Call call = getPayeeLocationsValidateBeforeCall(budgetId, null, null);
        Type localVarReturnType = new TypeToken<PayeeLocationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List payee locations (asynchronously)
     * Returns all payee locations
     * @param budgetId The ID of the Budget. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayeeLocationsAsync(String budgetId, final ApiCallback<PayeeLocationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayeeLocationsValidateBeforeCall(budgetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayeeLocationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayeeLocationsByPayee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId ID of payee (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayeeLocationsByPayeeCall(String budgetId, String payeeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/payees/{payee_id}/payee_locations"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()))
            .replaceAll("\\{" + "payee_id" + "\\}", apiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayeeLocationsByPayeeValidateBeforeCall(String budgetId, String payeeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getPayeeLocationsByPayee(Async)");
        }
        
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling getPayeeLocationsByPayee(Async)");
        }
        

        com.squareup.okhttp.Call call = getPayeeLocationsByPayeeCall(budgetId, payeeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List locations for a payee
     * Returns all payee locations for the specified payee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId ID of payee (required)
     * @return PayeeLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayeeLocationsResponse getPayeeLocationsByPayee(String budgetId, String payeeId) throws ApiException {
        ApiResponse<PayeeLocationsResponse> resp = getPayeeLocationsByPayeeWithHttpInfo(budgetId, payeeId);
        return resp.getData();
    }

    /**
     * List locations for a payee
     * Returns all payee locations for the specified payee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId ID of payee (required)
     * @return ApiResponse&lt;PayeeLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayeeLocationsResponse> getPayeeLocationsByPayeeWithHttpInfo(String budgetId, String payeeId) throws ApiException {
        com.squareup.okhttp.Call call = getPayeeLocationsByPayeeValidateBeforeCall(budgetId, payeeId, null, null);
        Type localVarReturnType = new TypeToken<PayeeLocationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List locations for a payee (asynchronously)
     * Returns all payee locations for the specified payee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId ID of payee (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayeeLocationsByPayeeAsync(String budgetId, String payeeId, final ApiCallback<PayeeLocationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayeeLocationsByPayeeValidateBeforeCall(budgetId, payeeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayeeLocationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
