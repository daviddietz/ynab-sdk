/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ynab.client.api;

import ynab.client.invoker.ApiCallback;
import ynab.client.invoker.ApiClient;
import ynab.client.invoker.ApiException;
import ynab.client.invoker.ApiResponse;
import ynab.client.invoker.Configuration;
import ynab.client.invoker.Pair;
import ynab.client.invoker.ProgressRequestBody;
import ynab.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ynab.client.model.BulkResponse;
import ynab.client.model.BulkTransactions;
import ynab.client.model.ErrorResponse;
import ynab.client.model.HybridTransactionsResponse;
import org.threeten.bp.LocalDate;
import ynab.client.model.SaveTransactionWrapper;
import ynab.client.model.TransactionResponse;
import ynab.client.model.TransactionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient apiClient;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for bulkCreateTransactions
     * @param budgetId The ID of the Budget. (required)
     * @param transactions The list of Transactions to create. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateTransactionsCall(String budgetId, BulkTransactions transactions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transactions;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/bulk"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateTransactionsValidateBeforeCall(String budgetId, BulkTransactions transactions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling bulkCreateTransactions(Async)");
        }
        
        // verify the required parameter 'transactions' is set
        if (transactions == null) {
            throw new ApiException("Missing the required parameter 'transactions' when calling bulkCreateTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = bulkCreateTransactionsCall(budgetId, transactions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bulk create transactions
     * Creates multiple transactions
     * @param budgetId The ID of the Budget. (required)
     * @param transactions The list of Transactions to create. (required)
     * @return BulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkResponse bulkCreateTransactions(String budgetId, BulkTransactions transactions) throws ApiException {
        ApiResponse<BulkResponse> resp = bulkCreateTransactionsWithHttpInfo(budgetId, transactions);
        return resp.getData();
    }

    /**
     * Bulk create transactions
     * Creates multiple transactions
     * @param budgetId The ID of the Budget. (required)
     * @param transactions The list of Transactions to create. (required)
     * @return ApiResponse&lt;BulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkResponse> bulkCreateTransactionsWithHttpInfo(String budgetId, BulkTransactions transactions) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateTransactionsValidateBeforeCall(budgetId, transactions, null, null);
        Type localVarReturnType = new TypeToken<BulkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create transactions (asynchronously)
     * Creates multiple transactions
     * @param budgetId The ID of the Budget. (required)
     * @param transactions The list of Transactions to create. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateTransactionsAsync(String budgetId, BulkTransactions transactions, final ApiCallback<BulkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateTransactionsValidateBeforeCall(budgetId, transactions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTransaction
     * @param budgetId The ID of the Budget. (required)
     * @param transaction The Transaction to create. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTransactionCall(String budgetId, SaveTransactionWrapper transaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transaction;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTransactionValidateBeforeCall(String budgetId, SaveTransactionWrapper transaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling createTransaction(Async)");
        }
        
        // verify the required parameter 'transaction' is set
        if (transaction == null) {
            throw new ApiException("Missing the required parameter 'transaction' when calling createTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = createTransactionCall(budgetId, transaction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new transaction
     * Creates a transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transaction The Transaction to create. (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse createTransaction(String budgetId, SaveTransactionWrapper transaction) throws ApiException {
        ApiResponse<TransactionResponse> resp = createTransactionWithHttpInfo(budgetId, transaction);
        return resp.getData();
    }

    /**
     * Create new transaction
     * Creates a transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transaction The Transaction to create. (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> createTransactionWithHttpInfo(String budgetId, SaveTransactionWrapper transaction) throws ApiException {
        com.squareup.okhttp.Call call = createTransactionValidateBeforeCall(budgetId, transaction, null, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new transaction (asynchronously)
     * Creates a transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transaction The Transaction to create. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransactionAsync(String budgetId, SaveTransactionWrapper transaction, final ApiCallback<TransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransactionValidateBeforeCall(budgetId, transaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactions
     * @param budgetId The ID of the Budget. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param type Only return transactions of a certain type (i.e. &#39;uncategorized&#39;, &#39;unapproved&#39;) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsCall(String budgetId, LocalDate sinceDate, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sinceDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since_date", sinceDate));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsValidateBeforeCall(String budgetId, LocalDate sinceDate, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsCall(budgetId, sinceDate, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List transactions
     * Returns budget transactions
     * @param budgetId The ID of the Budget. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param type Only return transactions of a certain type (i.e. &#39;uncategorized&#39;, &#39;unapproved&#39;) (optional)
     * @return TransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionsResponse getTransactions(String budgetId, LocalDate sinceDate, String type) throws ApiException {
        ApiResponse<TransactionsResponse> resp = getTransactionsWithHttpInfo(budgetId, sinceDate, type);
        return resp.getData();
    }

    /**
     * List transactions
     * Returns budget transactions
     * @param budgetId The ID of the Budget. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param type Only return transactions of a certain type (i.e. &#39;uncategorized&#39;, &#39;unapproved&#39;) (optional)
     * @return ApiResponse&lt;TransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionsResponse> getTransactionsWithHttpInfo(String budgetId, LocalDate sinceDate, String type) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(budgetId, sinceDate, type, null, null);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List transactions (asynchronously)
     * Returns budget transactions
     * @param budgetId The ID of the Budget. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param type Only return transactions of a certain type (i.e. &#39;uncategorized&#39;, &#39;unapproved&#39;) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsAsync(String budgetId, LocalDate sinceDate, String type, final ApiCallback<TransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(budgetId, sinceDate, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsByAccount
     * @param budgetId The ID of the Budget. (required)
     * @param accountId The ID of the Account. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByAccountCall(String budgetId, String accountId, LocalDate sinceDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/accounts/{account_id}/transactions"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId))
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sinceDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since_date", sinceDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsByAccountValidateBeforeCall(String budgetId, String accountId, LocalDate sinceDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getTransactionsByAccount(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getTransactionsByAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsByAccountCall(budgetId, accountId, sinceDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List account transactions
     * Returns all transactions for a specified account
     * @param budgetId The ID of the Budget. (required)
     * @param accountId The ID of the Account. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @return TransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionsResponse getTransactionsByAccount(String budgetId, String accountId, LocalDate sinceDate) throws ApiException {
        ApiResponse<TransactionsResponse> resp = getTransactionsByAccountWithHttpInfo(budgetId, accountId, sinceDate);
        return resp.getData();
    }

    /**
     * List account transactions
     * Returns all transactions for a specified account
     * @param budgetId The ID of the Budget. (required)
     * @param accountId The ID of the Account. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @return ApiResponse&lt;TransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionsResponse> getTransactionsByAccountWithHttpInfo(String budgetId, String accountId, LocalDate sinceDate) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsByAccountValidateBeforeCall(budgetId, accountId, sinceDate, null, null);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List account transactions (asynchronously)
     * Returns all transactions for a specified account
     * @param budgetId The ID of the Budget. (required)
     * @param accountId The ID of the Account. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByAccountAsync(String budgetId, String accountId, LocalDate sinceDate, final ApiCallback<TransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsByAccountValidateBeforeCall(budgetId, accountId, sinceDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsByCategory
     * @param budgetId The ID of the Budget. (required)
     * @param categoryId The ID of the Category. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByCategoryCall(String budgetId, String categoryId, LocalDate sinceDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/categories/{category_id}/transactions"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()))
            .replaceAll("\\{" + "category_id" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sinceDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since_date", sinceDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsByCategoryValidateBeforeCall(String budgetId, String categoryId, LocalDate sinceDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getTransactionsByCategory(Async)");
        }
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getTransactionsByCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsByCategoryCall(budgetId, categoryId, sinceDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List category transactions
     * Returns all transactions for a specified category
     * @param budgetId The ID of the Budget. (required)
     * @param categoryId The ID of the Category. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @return HybridTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HybridTransactionsResponse getTransactionsByCategory(String budgetId, String categoryId, LocalDate sinceDate) throws ApiException {
        ApiResponse<HybridTransactionsResponse> resp = getTransactionsByCategoryWithHttpInfo(budgetId, categoryId, sinceDate);
        return resp.getData();
    }

    /**
     * List category transactions
     * Returns all transactions for a specified category
     * @param budgetId The ID of the Budget. (required)
     * @param categoryId The ID of the Category. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @return ApiResponse&lt;HybridTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HybridTransactionsResponse> getTransactionsByCategoryWithHttpInfo(String budgetId, String categoryId, LocalDate sinceDate) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsByCategoryValidateBeforeCall(budgetId, categoryId, sinceDate, null, null);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List category transactions (asynchronously)
     * Returns all transactions for a specified category
     * @param budgetId The ID of the Budget. (required)
     * @param categoryId The ID of the Category. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByCategoryAsync(String budgetId, String categoryId, LocalDate sinceDate, final ApiCallback<HybridTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsByCategoryValidateBeforeCall(budgetId, categoryId, sinceDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsById
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByIdCall(String budgetId, String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/{transaction_id}"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()))
            .replaceAll("\\{" + "transaction_id" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsByIdValidateBeforeCall(String budgetId, String transactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getTransactionsById(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getTransactionsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsByIdCall(budgetId, transactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Single transaction
     * Returns a single transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse getTransactionsById(String budgetId, String transactionId) throws ApiException {
        ApiResponse<TransactionResponse> resp = getTransactionsByIdWithHttpInfo(budgetId, transactionId);
        return resp.getData();
    }

    /**
     * Single transaction
     * Returns a single transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> getTransactionsByIdWithHttpInfo(String budgetId, String transactionId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsByIdValidateBeforeCall(budgetId, transactionId, null, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Single transaction (asynchronously)
     * Returns a single transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByIdAsync(String budgetId, String transactionId, final ApiCallback<TransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsByIdValidateBeforeCall(budgetId, transactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsByPayee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId The ID of the Payee. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByPayeeCall(String budgetId, String payeeId, LocalDate sinceDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/payees/{payee_id}/transactions"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()))
            .replaceAll("\\{" + "payee_id" + "\\}", apiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sinceDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since_date", sinceDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsByPayeeValidateBeforeCall(String budgetId, String payeeId, LocalDate sinceDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getTransactionsByPayee(Async)");
        }
        
        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling getTransactionsByPayee(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsByPayeeCall(budgetId, payeeId, sinceDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List payee transactions
     * Returns all transactions for a specified payee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId The ID of the Payee. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @return HybridTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HybridTransactionsResponse getTransactionsByPayee(String budgetId, String payeeId, LocalDate sinceDate) throws ApiException {
        ApiResponse<HybridTransactionsResponse> resp = getTransactionsByPayeeWithHttpInfo(budgetId, payeeId, sinceDate);
        return resp.getData();
    }

    /**
     * List payee transactions
     * Returns all transactions for a specified payee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId The ID of the Payee. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @return ApiResponse&lt;HybridTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HybridTransactionsResponse> getTransactionsByPayeeWithHttpInfo(String budgetId, String payeeId, LocalDate sinceDate) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsByPayeeValidateBeforeCall(budgetId, payeeId, sinceDate, null, null);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List payee transactions (asynchronously)
     * Returns all transactions for a specified payee
     * @param budgetId The ID of the Budget. (required)
     * @param payeeId The ID of the Payee. (required)
     * @param sinceDate Only return transactions on or after this date. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsByPayeeAsync(String budgetId, String payeeId, LocalDate sinceDate, final ApiCallback<HybridTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsByPayeeValidateBeforeCall(budgetId, payeeId, sinceDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @param transaction The Transaction to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransactionCall(String budgetId, String transactionId, SaveTransactionWrapper transaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transaction;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/{transaction_id}"
            .replaceAll("\\{" + "budget_id" + "\\}", apiClient.escapeString(budgetId.toString()))
            .replaceAll("\\{" + "transaction_id" + "\\}", apiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransactionValidateBeforeCall(String budgetId, String transactionId, SaveTransactionWrapper transaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateTransaction(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling updateTransaction(Async)");
        }
        
        // verify the required parameter 'transaction' is set
        if (transaction == null) {
            throw new ApiException("Missing the required parameter 'transaction' when calling updateTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTransactionCall(budgetId, transactionId, transaction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an existing transaction
     * Updates a transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @param transaction The Transaction to update. (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionResponse updateTransaction(String budgetId, String transactionId, SaveTransactionWrapper transaction) throws ApiException {
        ApiResponse<TransactionResponse> resp = updateTransactionWithHttpInfo(budgetId, transactionId, transaction);
        return resp.getData();
    }

    /**
     * Updates an existing transaction
     * Updates a transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @param transaction The Transaction to update. (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionResponse> updateTransactionWithHttpInfo(String budgetId, String transactionId, SaveTransactionWrapper transaction) throws ApiException {
        com.squareup.okhttp.Call call = updateTransactionValidateBeforeCall(budgetId, transactionId, transaction, null, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an existing transaction (asynchronously)
     * Updates a transaction
     * @param budgetId The ID of the Budget. (required)
     * @param transactionId The ID of the Transaction. (required)
     * @param transaction The Transaction to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransactionAsync(String budgetId, String transactionId, SaveTransactionWrapper transaction, final ApiCallback<TransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransactionValidateBeforeCall(budgetId, transactionId, transaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
