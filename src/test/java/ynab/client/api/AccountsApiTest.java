/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ynab.client.api;

import com.squareup.okhttp.Call;
import org.junit.Before;
import org.mockito.Matchers;
import ynab.client.invoker.ApiClient;
import ynab.client.invoker.ApiException;
import ynab.client.model.*;

import java.util.*;

import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import ynab.client.invoker.ApiResponse;

/**
 * API tests for AccountsApi
 */
public class AccountsApiTest {
    private ApiClient mockApiClient;

    private AccountsApi accountsApi;
    private AccountResponse accountResponse;
    private AccountsResponse accountsResponse;
    private final String budgetId = "someBudgetId";
    private final String accountId = "someAccountId";

    @Before
    public void setup(){
        System.out.println("Setup");
        mockApiClient = mock(ApiClient.class);
        doReturn("anything").when(mockApiClient).escapeString(anyString());
        accountsApi = new AccountsApi(mockApiClient);
        Account account = new Account();
        account.setName("someName");
        account.setId("someId");

        AccountWrapper accountWrapper = new AccountWrapper();
        accountWrapper.setAccount(account);
        accountResponse = new AccountResponse();
        accountResponse.setData(accountWrapper);

        AccountsWrapper accountsWrapper = new AccountsWrapper();
        List<Account> accountsList = new LinkedList<>();
        accountsList.add(account);
        accountsWrapper.setAccounts(accountsList);
        accountsResponse = new AccountsResponse();
        accountsResponse.setData(accountsWrapper);
    }
    
    /**
     * Single account
     *
     * Returns a single account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountByIdTest() throws ApiException {
        ApiResponse<AccountResponse> mockResponse = new ApiResponse<AccountResponse>(200, null, accountResponse);
        doReturn(mockResponse).when(mockApiClient).execute(any(Call.class), Matchers.<Class<AccountResponse>>any());
        AccountResponse response = accountsApi.getAccountById(budgetId, accountId);
        assertEquals(response.getData().getAccount().getId(), "someId");
        assertEquals(response.getData().getAccount().getName(), "someName");
    }
    
    /**
     * Account list
     *
     * Returns all accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        ApiResponse<AccountsResponse> mockResponse = new ApiResponse<AccountsResponse>(200, null, accountsResponse);
        doReturn(mockResponse).when(mockApiClient).execute(any(Call.class), Matchers.<Class<AccountsResponse>>any());
        AccountsResponse response = accountsApi.getAccounts(budgetId);
        assertEquals(response.getData().getAccounts().get(0).getId(), "someId");
    }
    
}
