/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ynab.client.api;

import ynab.client.invoker.ApiException;
import ynab.client.model.BulkResponse;
import ynab.client.model.BulkTransactions;
import ynab.client.model.ErrorResponse;
import ynab.client.model.HybridTransactionsResponse;
import org.threeten.bp.LocalDate;
import ynab.client.model.SaveTransactionWrapper;
import ynab.client.model.TransactionResponse;
import ynab.client.model.TransactionsResponse;
import java.util.List;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Bulk create transactions
     *
     * Creates multiple transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkCreateTransactionsTest() throws ApiException {
        String budgetId = null;
        BulkTransactions transactions = null;
        BulkResponse response = api.bulkCreateTransactions(budgetId, transactions);

        // TODO: test validations
    }
    
    /**
     * Create new transaction
     *
     * Creates a transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransactionTest() throws ApiException {
        String budgetId = null;
        SaveTransactionWrapper transaction = null;
        TransactionResponse response = api.createTransaction(budgetId, transaction);

        // TODO: test validations
    }
    
    /**
     * List transactions
     *
     * Returns budget transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        String budgetId = null;
        LocalDate sinceDate = null;
        String type = null;
        TransactionsResponse response = api.getTransactions(budgetId, sinceDate, type);

        // TODO: test validations
    }
    
    /**
     * List account transactions
     *
     * Returns all transactions for a specified account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByAccountTest() throws ApiException {
        String budgetId = null;
        String accountId = null;
        LocalDate sinceDate = null;
        TransactionsResponse response = api.getTransactionsByAccount(budgetId, accountId, sinceDate);

        // TODO: test validations
    }
    
    /**
     * List category transactions
     *
     * Returns all transactions for a specified category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByCategoryTest() throws ApiException {
        String budgetId = null;
        String categoryId = null;
        LocalDate sinceDate = null;
        HybridTransactionsResponse response = api.getTransactionsByCategory(budgetId, categoryId, sinceDate);

        // TODO: test validations
    }
    
    /**
     * Single transaction
     *
     * Returns a single transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByIdTest() throws ApiException {
        String budgetId = null;
        String transactionId = null;
        TransactionResponse response = api.getTransactionsById(budgetId, transactionId);

        // TODO: test validations
    }
    
    /**
     * List payee transactions
     *
     * Returns all transactions for a specified payee
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByPayeeTest() throws ApiException {
        String budgetId = null;
        String payeeId = null;
        LocalDate sinceDate = null;
        HybridTransactionsResponse response = api.getTransactionsByPayee(budgetId, payeeId, sinceDate);

        // TODO: test validations
    }
    
    /**
     * Updates an existing transaction
     *
     * Updates a transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransactionTest() throws ApiException {
        String budgetId = null;
        String transactionId = null;
        SaveTransactionWrapper transaction = null;
        TransactionResponse response = api.updateTransaction(budgetId, transactionId, transaction);

        // TODO: test validations
    }
    
}
